在遍历过程中，我们使用A[i]来记录小时的第一位，其实我们可以知道，
如果第一位大于2了，那接下来的 j 和 k 就不需要遍历了。
同样的，如果第一位是2，第二位的 j 大于3,，那接下来的k也不需要遍历了
第三位如果大于5，也同样可以跳过这一步。所以，可以将算法改进，添加几个条件来减少运行时间。

class Solution {
    public String largestTimeFromDigits(int[] A) {
        Arrays.sort(A);
        for(int i = 3;i>=0;i--){
            if(A[i]>2) continue;
            for(int j = 3;j>=0;j--){
                if(j==i||A[i]==2&&A[j]>3) continue;
                for(int k =3;k>=0;k--){
                    if(k==i||k==j||A[k]>5)  continue;
                    return ""+A[i]+A[j]+":"+A[k]+A[6-i-j-k];
                }
            }
        }
        return "";
    }
}